/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    static bool same_tree(TreeNode* root, TreeNode* other)
    {
        if(root == nullptr && other == nullptr)
            return true;

        if((root != nullptr && other == nullptr) ||
            (root == nullptr && other != nullptr))
            return false;
        
        if(root->val != other->val)
            return false;
        
        return same_tree(root->left, other->left) &&
            same_tree(root->right, other->right);
    }

    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root == nullptr && subRoot == nullptr)
            return true;
        if((root != nullptr && subRoot == nullptr) ||
            (root == nullptr && subRoot != nullptr))
            return false;
            
        return ((root->val == subRoot->val) && same_tree(root, subRoot)) ||
             isSubtree(root->left, subRoot) ||
                isSubtree(root->right, subRoot);
                                
    }
};